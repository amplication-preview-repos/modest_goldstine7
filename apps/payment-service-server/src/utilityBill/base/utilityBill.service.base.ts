/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  UtilityBill as PrismaUtilityBill,
  Payment as PrismaPayment,
  User as PrismaUser,
} from "@prisma/client";

export class UtilityBillServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UtilityBillCountArgs, "select">
  ): Promise<number> {
    return this.prisma.utilityBill.count(args);
  }

  async utilityBills<T extends Prisma.UtilityBillFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UtilityBillFindManyArgs>
  ): Promise<PrismaUtilityBill[]> {
    return this.prisma.utilityBill.findMany<Prisma.UtilityBillFindManyArgs>(
      args
    );
  }
  async utilityBill<T extends Prisma.UtilityBillFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UtilityBillFindUniqueArgs>
  ): Promise<PrismaUtilityBill | null> {
    return this.prisma.utilityBill.findUnique(args);
  }
  async createUtilityBill<T extends Prisma.UtilityBillCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UtilityBillCreateArgs>
  ): Promise<PrismaUtilityBill> {
    return this.prisma.utilityBill.create<T>(args);
  }
  async updateUtilityBill<T extends Prisma.UtilityBillUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UtilityBillUpdateArgs>
  ): Promise<PrismaUtilityBill> {
    return this.prisma.utilityBill.update<T>(args);
  }
  async deleteUtilityBill<T extends Prisma.UtilityBillDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UtilityBillDeleteArgs>
  ): Promise<PrismaUtilityBill> {
    return this.prisma.utilityBill.delete(args);
  }

  async findPayments(
    parentId: string,
    args: Prisma.PaymentFindManyArgs
  ): Promise<PrismaPayment[]> {
    return this.prisma.utilityBill
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .payments(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.utilityBill
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
