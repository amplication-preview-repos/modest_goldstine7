/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UtilityBill } from "./UtilityBill";
import { UtilityBillCountArgs } from "./UtilityBillCountArgs";
import { UtilityBillFindManyArgs } from "./UtilityBillFindManyArgs";
import { UtilityBillFindUniqueArgs } from "./UtilityBillFindUniqueArgs";
import { CreateUtilityBillArgs } from "./CreateUtilityBillArgs";
import { UpdateUtilityBillArgs } from "./UpdateUtilityBillArgs";
import { DeleteUtilityBillArgs } from "./DeleteUtilityBillArgs";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { User } from "../../user/base/User";
import { UtilityBillService } from "../utilityBill.service";
@graphql.Resolver(() => UtilityBill)
export class UtilityBillResolverBase {
  constructor(protected readonly service: UtilityBillService) {}

  async _utilityBillsMeta(
    @graphql.Args() args: UtilityBillCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UtilityBill])
  async utilityBills(
    @graphql.Args() args: UtilityBillFindManyArgs
  ): Promise<UtilityBill[]> {
    return this.service.utilityBills(args);
  }

  @graphql.Query(() => UtilityBill, { nullable: true })
  async utilityBill(
    @graphql.Args() args: UtilityBillFindUniqueArgs
  ): Promise<UtilityBill | null> {
    const result = await this.service.utilityBill(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UtilityBill)
  async createUtilityBill(
    @graphql.Args() args: CreateUtilityBillArgs
  ): Promise<UtilityBill> {
    return await this.service.createUtilityBill({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => UtilityBill)
  async updateUtilityBill(
    @graphql.Args() args: UpdateUtilityBillArgs
  ): Promise<UtilityBill | null> {
    try {
      return await this.service.updateUtilityBill({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UtilityBill)
  async deleteUtilityBill(
    @graphql.Args() args: DeleteUtilityBillArgs
  ): Promise<UtilityBill | null> {
    try {
      return await this.service.deleteUtilityBill(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Payment], { name: "payments" })
  async findPayments(
    @graphql.Parent() parent: UtilityBill,
    @graphql.Args() args: PaymentFindManyArgs
  ): Promise<Payment[]> {
    const results = await this.service.findPayments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: UtilityBill): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
